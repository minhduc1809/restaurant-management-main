from flask import Blueprint, request, jsonify
from db_config import get_db_connection
from datetime import datetime, timedelta
import pytz

table_bp = Blueprint('table_bp', __name__)

# Thi·∫øt l·∫≠p m√∫i gi·ªù Vi·ªát Nam
VN_TZ = pytz.timezone('Asia/Ho_Chi_Minh')

def get_vn_now():
    return datetime.now(VN_TZ)

def tinh_trang_thai_ban(thoi_gian_dat_vn):
    now = get_vn_now()
    thoi_gian_ket_thuc = thoi_gian_dat_vn + timedelta(hours=3)

    if now < thoi_gian_dat_vn:
        return 'ƒê√£ ƒë·∫∑t'
    elif thoi_gian_dat_vn <= now < thoi_gian_ket_thuc:
        con_lai = (thoi_gian_ket_thuc - now).total_seconds() / 60
        if con_lai <= 30:
            return 'S·∫Øp tr·ªëng'
        return 'ƒêang s·ª≠ d·ª•ng'
    else:
        return 'Tr·ªëng'

def cap_nhat_trang_thai_ban():
    db = get_db_connection()
    cursor = db.cursor(dictionary=True)

    # L·∫•y t·∫•t c·∫£ b√†n
    cursor.execute("SELECT BanAnID FROM banan")
    ds_ban = cursor.fetchall()

    for ban in ds_ban:
        ban_id = ban['BanAnID']

        # T√¨m l∆∞·ª£t ƒë·∫∑t m·ªõi nh·∫•t g·∫ßn th·ªùi gian hi·ªán t·∫°i
        cursor.execute("""
            SELECT ThoiGianDat FROM luotdatban 
            WHERE BanAnID = %s 
            ORDER BY ThoiGianDat DESC LIMIT 1
        """, (ban_id,))
        ket_qua = cursor.fetchone()

        if not ket_qua:
            trang_thai = 'Tr·ªëng'
        else:
            thoi_gian_utc = pytz.UTC.localize(ket_qua['ThoiGianDat'])
            thoi_gian_vn = thoi_gian_utc.astimezone(VN_TZ)
            trang_thai = tinh_trang_thai_ban(thoi_gian_vn)

        # C·∫≠p nh·∫≠t l·∫°i tr·∫°ng th√°i b√†n
        cursor.execute("UPDATE banan SET TrangThai = %s WHERE BanAnID = %s", (trang_thai, ban_id))

    db.commit()
    db.close()

# üìã L·∫•y danh s√°ch t·∫•t c·∫£ b√†n ƒÉn v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i tr∆∞·ªõc khi tr·∫£
@table_bp.route('/', methods=['GET'])
def get_all_tables():
    cap_nhat_trang_thai_ban()  # c·∫≠p nh·∫≠t tr∆∞·ªõc khi tr·∫£ d·ªØ li·ªáu
    db = get_db_connection()
    cursor = db.cursor(dictionary=True)

    cursor.execute("SELECT BanAnID, SoBan, TrangThai FROM banan ORDER BY SoBan")
    tables = cursor.fetchall()
    db.close()
    return jsonify(tables)

# ‚ûï Th√™m b√†n m·ªõi
@table_bp.route('/', methods=['POST'])
def add_table():
    data = request.json
    so_ban = data.get('SoBan')
    trang_thai = data.get('TrangThai', 'Tr·ªëng')  # m·∫∑c ƒë·ªãnh l√† Tr·ªëng n·∫øu kh√¥ng c√≥

    if so_ban is None:
        return jsonify({'message': 'Thi·∫øu s·ªë b√†n'}), 400

    db = get_db_connection()
    cursor = db.cursor()

    cursor.execute("""
        INSERT INTO banan (SoBan, TrangThai)
        VALUES (%s, %s)
    """, (so_ban, trang_thai))

    db.commit()
    db.close()
    return jsonify({'message': 'Th√™m b√†n th√†nh c√¥ng'}), 201

# ‚úèÔ∏è C·∫≠p nh·∫≠t tr·∫°ng th√°i b√†n ƒÉn th·ªß c√¥ng
@table_bp.route('/<int:ban_an_id>', methods=['PUT'])
def update_table_status(ban_an_id):
    data = request.json
    trang_thai = data.get('TrangThai')

    if not trang_thai:
        return jsonify({'message': 'Thi·∫øu tr·∫°ng th√°i'}), 400

    db = get_db_connection()
    cursor = db.cursor()

    cursor.execute("""
        UPDATE banan SET TrangThai = %s WHERE BanAnID = %s
    """, (trang_thai, ban_an_id))

    db.commit()
    db.close()
    return jsonify({'message': 'C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng'})

# ‚ùå X√≥a b√†n ƒÉn
@table_bp.route('/<int:ban_an_id>', methods=['DELETE'])
def delete_table(ban_an_id):
    db = get_db_connection()
    cursor = db.cursor()
    cursor.execute("DELETE FROM banan WHERE BanAnID = %s", (ban_an_id,))
    db.commit()
    db.close()
    return jsonify({'message': 'X√≥a b√†n th√†nh c√¥ng'})

# üîÑ API c·∫≠p nh·∫≠t tr·∫°ng th√°i t·∫•t c·∫£ b√†n (n·∫øu mu·ªën g·ªçi tay)
@table_bp.route('/cap-nhat-trang-thai', methods=['POST'])
def trigger_cap_nhat_trang_thai():
    cap_nhat_trang_thai_ban()
    return jsonify({'message': 'C·∫≠p nh·∫≠t tr·∫°ng th√°i b√†n ƒÉn th√†nh c√¥ng'})
