from flask import Blueprint, request, jsonify
from db_config import get_db_connection
from datetime import datetime, timedelta
import pytz

booking_bp = Blueprint('booking_bp', __name__)

# M√∫i gi·ªù Vi·ªát Nam
VN_TZ = pytz.timezone('Asia/Ho_Chi_Minh')

def get_vn_now():
    """L·∫•y th·ªùi gian hi·ªán t·∫°i theo m√∫i gi·ªù Vi·ªát Nam"""
    return datetime.now(VN_TZ)

def convert_to_vn_time(dt_str):
    """Chuy·ªÉn ƒë·ªïi string th·ªùi gian th√†nh datetime v·ªõi m√∫i gi·ªù Vi·ªát Nam"""
    dt = datetime.strptime(dt_str, "%Y-%m-%dT%H:%M")
    return VN_TZ.localize(dt)

def format_for_db(dt):
    """Format datetime ƒë·ªÉ l∆∞u v√†o database (UTC)"""
    return dt.astimezone(pytz.UTC).strftime("%Y-%m-%d %H:%M:%S")

def parse_from_db(dt_str):
    """Parse datetime t·ª´ database v√† chuy·ªÉn v·ªÅ m√∫i gi·ªù Vi·ªát Nam"""
    dt_utc = datetime.strptime(dt_str, "%Y-%m-%d %H:%M:%S")
    dt_utc = pytz.UTC.localize(dt_utc)
    return dt_utc.astimezone(VN_TZ)

# üìã L·∫•y t·∫•t c·∫£ l∆∞·ª£t ƒë·∫∑t b√†n k√®m tr·∫°ng th√°i b√†n ƒÉn
@booking_bp.route('/', methods=['GET'])
def get_all_bookings():
    search = request.args.get('search')
    db = get_db_connection()
    cursor = db.cursor(dictionary=True)

    query = """
        SELECT l.LuotDatBanID, k.HoTenKhachHang, l.ThoiGianDat, 
               b.SoBan, b.TrangThai
        FROM luotdatban l
        JOIN khachhang k ON l.KhachHangID = k.KhachHangID
        JOIN banan b ON l.BanAnID = b.BanAnID
    """
    if search:
        query += " WHERE k.HoTenKhachHang LIKE %s ORDER BY l.ThoiGianDat DESC"
        cursor.execute(query, (f"%{search}%",))
    else:
        query += " ORDER BY l.ThoiGianDat DESC"
        cursor.execute(query)

    bookings = cursor.fetchall()
    
    # Chuy·ªÉn ƒë·ªïi th·ªùi gian v·ªÅ m√∫i gi·ªù Vi·ªát Nam cho frontend
    for booking in bookings:
        if booking['ThoiGianDat']:
            # Chuy·ªÉn t·ª´ UTC (database) v·ªÅ VN time
            dt_utc = pytz.UTC.localize(booking['ThoiGianDat'])
            booking['ThoiGianDat'] = dt_utc.astimezone(VN_TZ).isoformat()
    
    db.close()
    return jsonify(bookings)

# ‚ûï Th√™m l∆∞·ª£t ƒë·∫∑t b√†n m·ªõi
@booking_bp.route('/', methods=['POST'])
def create_booking():
    data = request.json
    ten_khach_hang = data.get('HoTenKhachHang')
    thoi_gian_dat_str = data.get('ThoiGianDat')  # ISO format: "YYYY-MM-DDTHH:MM"
    so_ban = data.get('SoBan')

    if not ten_khach_hang or not thoi_gian_dat_str or not so_ban:
        return jsonify({'message': 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc'}), 400

    try:
        # Chuy·ªÉn ƒë·ªïi th·ªùi gian t·ª´ frontend (VN time) 
        thoi_gian_dat = convert_to_vn_time(thoi_gian_dat_str)
    except ValueError:
        return jsonify({'message': 'ƒê·ªãnh d·∫°ng th·ªùi gian kh√¥ng h·ª£p l·ªá'}), 400

    # Ki·ªÉm tra th·ªùi gian ƒë·∫∑t ph·∫£i sau th·ªùi gian hi·ªán t·∫°i (c√πng m√∫i gi·ªù VN)
    now_vn = get_vn_now()
    if thoi_gian_dat <= now_vn:
        return jsonify({'message': 'Th·ªùi gian ƒë·∫∑t ph·∫£i sau th·ªùi gian hi·ªán t·∫°i'}), 400

    db = get_db_connection()
    cursor = db.cursor(dictionary=True)

    try:
        # Ki·ªÉm tra kh√°ch h√†ng c√≥ t·ªìn t·∫°i ch∆∞a
        cursor.execute("SELECT KhachHangID FROM khachhang WHERE HoTenKhachHang = %s", (ten_khach_hang,))
        result = cursor.fetchone()

        if result:
            khach_hang_id = result['KhachHangID']
        else:
            cursor.execute(
                "INSERT INTO khachhang (HoTenKhachHang, SoDienThoai) VALUES (%s, %s)",
                (ten_khach_hang, '')
            )
            khach_hang_id = cursor.lastrowid

        # L·∫•y BanAnID t·ª´ s·ªë b√†n
        cursor.execute("SELECT BanAnID FROM banan WHERE SoBan = %s", (so_ban,))
        ban_result = cursor.fetchone()

        if not ban_result:
            db.rollback()
            db.close()
            return jsonify({'message': 'Kh√¥ng t√¨m th·∫•y s·ªë b√†n n√†y'}), 400

        ban_an_id = ban_result['BanAnID']

        # Chuy·ªÉn ƒë·ªïi th·ªùi gian ƒë·ªÉ l∆∞u v√†o database (UTC)
        thoi_gian_dat_utc = format_for_db(thoi_gian_dat)
        thoi_gian_ket_thuc_utc = format_for_db(thoi_gian_dat + timedelta(hours=3))
        
        # Ki·ªÉm tra b√†n c√≥ b·ªã tr√πng trong khung 3 gi·ªù kh√¥ng
        cursor.execute("""
            SELECT LuotDatBanID, ThoiGianDat 
            FROM luotdatban 
            WHERE BanAnID = %s 
            AND (
                (%s >= ThoiGianDat AND %s < DATE_ADD(ThoiGianDat, INTERVAL 3 HOUR))
                OR
                (ThoiGianDat >= %s AND ThoiGianDat < %s)
            )
        """, (ban_an_id, thoi_gian_dat_utc, thoi_gian_dat_utc, 
              thoi_gian_dat_utc, thoi_gian_ket_thuc_utc))

        conflicting_bookings = cursor.fetchall()

        if conflicting_bookings:
            db.rollback()
            db.close()
            return jsonify({
                'message': 'B√†n n√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t trong khung gi·ªù ƒë√≥. Vui l√≤ng ch·ªçn th·ªùi gian kh√°c (c√°ch √≠t nh·∫•t 3 ti·∫øng so v·ªõi l∆∞·ª£t ƒë·∫∑t kh√°c)'
            }), 400

        # Th√™m l∆∞·ª£t ƒë·∫∑t b√†n m·ªõi (l∆∞u UTC v√†o database)
        cursor.execute("""
            INSERT INTO luotdatban (KhachHangID, BanAnID, ThoiGianDat)
            VALUES (%s, %s, %s)
        """, (khach_hang_id, ban_an_id, thoi_gian_dat_utc))

        db.commit()

        return jsonify({'message': 'ƒê·∫∑t b√†n th√†nh c√¥ng'}), 201

    except Exception as e:
        db.rollback()
        return jsonify({'message': str(e)}), 500
    finally:
        db.close()

# üìä L·∫•y tr·∫°ng th√°i b√†n cho th·ªùi gian c·ª• th·ªÉ (API b·ªï sung)
@booking_bp.route('/table-status/<int:so_ban>', methods=['GET'])
def get_table_status(so_ban):
    db = get_db_connection()
    cursor = db.cursor(dictionary=True)
    
    try:
        # L·∫•y BanAnID t·ª´ s·ªë b√†n
        cursor.execute("SELECT BanAnID FROM banan WHERE SoBan = %s", (so_ban,))
        ban_result = cursor.fetchone()
        
        if not ban_result:
            return jsonify({'message': 'Kh√¥ng t√¨m th·∫•y b√†n'}), 404
            
        ban_an_id = ban_result['BanAnID']
        current_time_vn = get_vn_now()
        
        # L·∫•y t·∫•t c·∫£ l∆∞·ª£t ƒë·∫∑t c·ªßa b√†n n√†y
        cursor.execute("""
            SELECT l.LuotDatBanID, k.HoTenKhachHang, l.ThoiGianDat
            FROM luotdatban l
            JOIN khachhang k ON l.KhachHangID = k.KhachHangID
            WHERE l.BanAnID = %s
            ORDER BY l.ThoiGianDat ASC
        """, (ban_an_id,))
        
        bookings = cursor.fetchall()
        
        # Chuy·ªÉn ƒë·ªïi th·ªùi gian v√† x√°c ƒë·ªãnh tr·∫°ng th√°i
        current_status = "Tr·ªëng"
        current_booking = None
        
        for booking in bookings:
            # Chuy·ªÉn t·ª´ UTC (database) v·ªÅ VN time
            dt_utc = pytz.UTC.localize(booking['ThoiGianDat'])
            thoi_gian_dat_vn = dt_utc.astimezone(VN_TZ)
            thoi_gian_ket_thuc_vn = thoi_gian_dat_vn + timedelta(hours=3)
            
            # C·∫≠p nh·∫≠t th·ªùi gian cho response
            booking['ThoiGianDat'] = thoi_gian_dat_vn.isoformat()
            
            if current_time_vn >= thoi_gian_dat_vn and current_time_vn < thoi_gian_ket_thuc_vn:
                current_status = "ƒêang s·ª≠ d·ª•ng"
                current_booking = booking
                break
            elif current_time_vn < thoi_gian_dat_vn:
                current_status = "ƒê√£ ƒë·∫∑t"
                current_booking = booking
                break
        
        return jsonify({
            'so_ban': so_ban,
            'trang_thai': current_status,
            'booking_info': current_booking,
            'tat_ca_dat_ban': bookings,
            'current_time_vn': current_time_vn.isoformat()
        })
        
    except Exception as e:
        return jsonify({'message': str(e)}), 500
    finally:
        db.close()

# ‚ùå X√≥a l∆∞·ª£t ƒë·∫∑t b√†n
@booking_bp.route('/<int:luot_dat_ban_id>', methods=['DELETE'])
def delete_booking(luot_dat_ban_id):
    db = get_db_connection()
    cursor = db.cursor()

    try:
        cursor.execute("DELETE FROM luotdatban WHERE LuotDatBanID = %s", (luot_dat_ban_id,))
        db.commit()
        return jsonify({'message': 'H·ªßy l∆∞·ª£t ƒë·∫∑t b√†n th√†nh c√¥ng'}), 200
    except Exception as e:
        db.rollback()
        return jsonify({'message': str(e)}), 500
    finally:
        db.close()